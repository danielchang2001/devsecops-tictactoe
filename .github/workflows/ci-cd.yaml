name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
    paths-ignore:
      - 'kubernetes/**'  # Avoid loops on manifest updates
  pull_request:
    branches: [ main ]

jobs:
  unit-tests-frontend:
    name: Unit Tests (Frontend)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run frontend unit tests
        run: npm test || echo "No tests found"

  lint-frontend:
    name: Lint (Frontend)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint

  unit-tests-backend:
    name: Unit Tests (Backend)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies (backend)
        run: |
          cd backend
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run backend unit tests
        run: |
          cd backend
          pytest main_test.py

  lint-backend:
    name: Lint (Backend)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install flake8
        run: pip install flake8

      - name: Run flake8 linter
        run: |
          cd backend
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics

  docker:
    name: Docker Build, Scan, and Push
    runs-on: ubuntu-latest
    needs: 
      - unit-tests-frontend
      - lint-frontend
      - unit-tests-backend
      - lint-backend
    env:
      REGISTRY: ghcr.io
      FRONTEND_IMAGE: ${{ github.repository }}-frontend
      BACKEND_IMAGE: ${{ github.repository }}-backend
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.TOKEN }}

      # Frontend Docker Build
      - name: Build & Push Frontend Image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfile
          push: false
          tags: |
            ${{ env.REGISTRY }}/${{ env.FRONTEND_IMAGE }}:sha-${{ github.sha }}
            ${{ env.REGISTRY }}/${{ env.FRONTEND_IMAGE }}:latest
          load: true

      # Backend Docker Build
      - name: Build & Push Backend Image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/Dockerfile
          push: false
          tags: |
            ${{ env.REGISTRY }}/${{ env.BACKEND_IMAGE }}:sha-${{ github.sha }}
            ${{ env.REGISTRY }}/${{ env.BACKEND_IMAGE }}:latest
          load: true

      # Trivy Scans
      - name: Trivy Scan - Frontend
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.FRONTEND_IMAGE }}:sha-${{ github.sha }}
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'

      - name: Trivy Scan - Backend
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.BACKEND_IMAGE }}:sha-${{ github.sha }}
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'

      # Push images after scan
      - name: Push Frontend Image
        run: |
          docker push ${{ env.REGISTRY }}/${{ env.FRONTEND_IMAGE }}:sha-${{ github.sha }}
          docker push ${{ env.REGISTRY }}/${{ env.FRONTEND_IMAGE }}:latest

      - name: Push Backend Image
        run: |
          docker push ${{ env.REGISTRY }}/${{ env.BACKEND_IMAGE }}:sha-${{ github.sha }}
          docker push ${{ env.REGISTRY }}/${{ env.BACKEND_IMAGE }}:latest

  update-k8s:
    name: Update Kubernetes Manifests
    runs-on: ubuntu-latest
    needs: docker
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.TOKEN }}

      - name: Setup Git config
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"

      - name: Update Deployment Images
        env:
          IMAGE_TAG: sha-${{ github.sha }}
          REGISTRY: ghcr.io
          FRONTEND_IMAGE: ${{ github.repository }}-frontend
          BACKEND_IMAGE: ${{ github.repository }}-backend
        run: |
          sed -i "s|image: ${REGISTRY}/.*/frontend:.*|image: ${REGISTRY}/${FRONTEND_IMAGE}:${IMAGE_TAG}|g" kubernetes/frontend-deployment.yaml
          sed -i "s|image: ${REGISTRY}/.*/backend:.*|image: ${REGISTRY}/${BACKEND_IMAGE}:${IMAGE_TAG}|g" kubernetes/backend-deployment.yaml

          echo "Updated deployment images to tag: ${IMAGE_TAG}"

      - name: Commit and push changes
        run: |
          git add kubernetes/*-deployment.yaml
          git commit -m "Update deployment images to sha-${{ github.sha }} [skip ci]" || echo "No changes to commit"
          git push
